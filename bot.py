import os
import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '123456789').split(',')]
CHANNEL_ID = os.getenv('CHANNEL_ID', '@your_channel')

# –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
class Storage:
    def __init__(self):
        self.pending_posts = {}
        self.admin_vacations = {}

storage = Storage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def create_admin_keyboard(post_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{post_id}"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_id}"))
    return keyboard.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if is_admin(message.from_user.id):
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        await message.answer("üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ—Å—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")

@dp.message(F.text)
async def handle_text_message(message: Message):
    if message.from_user.is_bot:
        return
        
    if is_admin(message.from_user.id):
        return
    
    await message.answer("‚è≥ –í–∞—à —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

@dp.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω!")
    await callback.message.edit_text("‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_post(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
    await callback.message.edit_text("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())        }
        self.pending_posts[forwarded_to_admin.message_id] = post_data
        self.user_posts[user_message.from_user.id] = forwarded_to_admin.message_id
        
    async def get_pending_post(self, admin_message_id: int) -> Optional[Dict]:
        return self.pending_posts.get(admin_message_id)
    
    async def remove_pending_post(self, admin_message_id: int):
        if admin_message_id in self.pending_posts:
            user_id = self.pending_posts[admin_message_id]['user_id']
            if user_id in self.user_posts:
                del self.user_posts[user_id]
            del self.pending_posts[admin_message_id]
    
    async def set_admin_vacation(self, admin_id: int, on_vacation: bool):
        self.admin_vacations[admin_id] = on_vacation
        
    async def is_admin_on_vacation(self, admin_id: int) -> bool:
        return self.admin_vacations.get(admin_id, False)
    
    async def get_available_admins_count(self) -> int:
        return len([admin_id for admin_id in ADMIN_IDS if not self.admin_vacations.get(admin_id, False)])

storage = Storage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class AdminStates(StatesGroup):
    waiting_for_channel = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def create_admin_keyboard(post_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{post_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_id}")
    )
    return keyboard.as_markup()

def create_vacation_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üõå –£–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫", callback_data="vacation_on"),
        InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∏–∑ –æ—Ç–ø—É—Å–∫–∞", callback_data="vacation_off")
    )
    return keyboard.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    if is_admin(message.from_user.id):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/vacation - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–æ–º\n"
            "/set_channel - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ—Å—Ç, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
        )

@dp.message(Command("vacation"))
async def cmd_vacation(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
        
    await message.answer(
        "üèñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–æ–º:",
        reply_markup=create_vacation_keyboard()
    )

@dp.message(Command("set_channel"))
async def cmd_set_channel(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
        
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel_name):"
    )
    await state.set_state(AdminStates.waiting_for_channel)

@dp.message(AdminStates.waiting_for_channel)
async def process_channel_id(message: Message, state: FSMContext):
    global CHANNEL_ID
    CHANNEL_ID = message.text.strip()
    await state.clear()
    await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {CHANNEL_ID}")

@dp.message(F.content_type.in_({'text', 'photo', 'video', 'document'}))
async def handle_user_post(message: Message):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        return
        
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_admin(message.from_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    available_admins = await storage.get_available_admins_count()
    if available_admins == 0:
        await message.answer("‚ùå –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await message.answer("‚è≥ –í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –ø–æ—Å—Ç –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    sent_messages = []
    for admin_id in ADMIN_IDS:
        if not await storage.is_admin_on_vacation(admin_id):
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                if message.content_type == 'text':
                    sent_msg = await bot.send_message(
                        admin_id,
                        f"üì® –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.id}:\n\n{message.text}",
                        reply_markup=create_admin_keyboard(0)  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                    )
                else:
                    caption = f"üì® –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.id}"
                    if message.caption:
                        caption += f"\n\n{message.caption}"
                    
                    if message.content_type == 'photo':
                        sent_msg = await bot.send_photo(
                            admin_id,
                            message.photo[-1].file_id,
                            caption=caption,
                            reply_markup=create_admin_keyboard(0)
                        )
                    elif message.content_type == 'video':
                        sent_msg = await bot.send_video(
                            admin_id,
                            message.video.file_id,
                            caption=caption,
                            reply_markup=create_admin_keyboard(0)
                        )
                    elif message.content_type == 'document':
                        sent_msg = await bot.send_document(
                            admin_id,
                            message.document.file_id,
                            caption=caption,
                            reply_markup=create_admin_keyboard(0)
                        )
                
                sent_messages.append(sent_msg)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    if sent_messages:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await storage.add_pending_post(message, sent_messages[0])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        for sent_msg in sent_messages:
            await bot.edit_message_reply_markup(
                chat_id=sent_msg.chat.id,
                message_id=sent_msg.message_id,
                reply_markup=create_admin_keyboard(sent_msg.message_id)
            )

@dp.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    post_id = int(callback.data.split("_")[1])
    post_data = await storage.get_pending_post(post_id)
    
    if not post_data:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        if post_data['content'].content_type == 'text':
            await bot.send_message(
                CHANNEL_ID,
                post_data['content'].text
            )
        else:
            caption = post_data['content'].caption
            if post_data['content'].content_type == 'photo':
                await bot.send_photo(
                    CHANNEL_ID,
                    post_data['content'].photo[-1].file_id,
                    caption=caption
                )
            elif post_data['content'].content_type == 'video':
                await bot.send_video(
                    CHANNEL_ID,
                    post_data['content'].video.file_id,
                    caption=caption
                )
            elif post_data['content'].content_type == 'document':
                await bot.send_document(
                    CHANNEL_ID,
                    post_data['content'].document.file_id,
                    caption=caption
                )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            post_data['user_id'],
            "‚úÖ –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.delete_message(
            callback.message.chat.id,
            callback.message.message_id
        )
        
        await storage.remove_pending_post(post_id)
        await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_post(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
        
    post_id = int(callback.data.split("_")[1])
    post_data = await storage.get_pending_post(post_id)
    
    if not post_data:
        await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            post_data['user_id'],
            "‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await bot.delete_message(
            callback.message.chat.id,
            callback.message.message_id
        )
        
        await storage.remove_pending_post(post_id)
        await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞.")

@dp.callback_query(F.data == "vacation_on")
async def vacation_on(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    available_admins = await storage.get_available_admins_count()
    if available_admins <= 1:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫, —Ç–∞–∫ –∫–∞–∫ –≤—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    
    await storage.set_admin_vacation(callback.from_user.id, True)
    await callback.message.edit_text("‚úÖ –í—ã —É—à–ª–∏ –≤ –æ—Ç–ø—É—Å–∫. –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –Ω–µ –±—É–¥—É—Ç –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.")
    await callback.answer()

@dp.callback_query(F.data == "vacation_off")
async def vacation_off(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    
    await storage.set_admin_vacation(callback.from_user.id, False)
    await callback.message.edit_text("‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ –æ—Ç–ø—É—Å–∫–∞. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã.")
    await callback.answer()

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç–ø—É—Å–∫–æ–≤
    for admin_id in ADMIN_IDS:
        await storage.set_admin_vacation(admin_id, False)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
